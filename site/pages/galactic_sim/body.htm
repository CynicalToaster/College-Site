<div id="page" class="container">
    <? $this->renderPartial('site/pages/page_headers/home.htm') ?>
    <!-- <div id="banner">
        <div class="row">
            <img class="banner-image" src="resources/images/background_1.jpg" alt="" />
        </div>
    </div> -->
    <div id="content">
        <div class="row">
            <div class="offset-a4-1 col-a4-10">
                <div class="offset-a2-2 col-a2-8">

                    <div class="row">
                        <div id="breadcrumbs">
                            <ul>
                                <li class="breadcrumbs-crumb">
                                    <a href="/home">Home</a>
                                    <i class="fa fa-angle-right" aria-hidden="true"></i>
                                </li>
                                <li class="breadcrumbs-crumb">
                                    <a href="/projects">Projects</a>
                                    <i class="fa fa-angle-right" aria-hidden="true"></i>
                                </li>
                                <li class="breadcrumbs-active">Voxel Engine Prototype</li>
                            </ul>
                        </div>
                    </div>

                    <div class="col-a3-12">
                        <div class="panel">
                            <div class="panel-header">
                                <h2 class="pl-20">Voxel Engine Prototype</h2>
                            </div>

                            <style>
                                #canvas {
                                    /* width: 50%;  */
                                    /* height: 400px;  */
                                    max-width: 100%;
                                    border: 1px solid #ddd; 
                                    box-shadow: 0px 0px 4px -2px #000;
                                }
                            </style>
                            
                            <div class="row">
                                <canvas id="canvas" class="mb-10" width="800" height="600" />
                            </div>

                            <script>

                                function getRandomInt(min, max) {
                                    return Math.floor(Math.random() * ((max - min) + 1)) + min;
                                }

                                class Colour {
                                    constructor(r,g,b,a) {
                                        this.r = r;
                                        this.g = g;
                                        this.b = b;
                                        this.a = a;
                                    }

                                    hex() {
                                        return '#' + this.numberToHex(this.r) + this.numberToHex(this.g) + this.numberToHex(this.b);
                                    }

                                    rgb() {
                                        return [this.r, this.g, this.b];
                                    }

                                    rgba() {
                                        return [this.r, this.g, this.b, this.a];
                                    }

                                    numberToHex(value) {
                                        var hex = value.toString(16);
                                        if (hex.length < 2)
                                            return '0' + hex;
                                        else
                                            return hex;
                                    }
                                }

                                class Location {
                                    constructor(x, y) {
                                        this.x = x;
                                        this.y = y;
                                        this.type = null;
                                    }

                                    setType(type) {
                                        this.type = type;
                                    }

                                    getDistance(target) {
                                        return Math.sqrt( Math.pow(target.x - this.x, 2) + Math.pow(target.y - this.y, 2) );
                                    }

                                    getAdjacentLocations() {
                                        
                                    }
                                }

                                class Navigation {
                                    constructor() {

                                    }

                                    static findPathBetween(startLocation, endLocation, maxSearches) {
                                        var scanning = [startLocation];
                                        var scanned = [];
                                        var path = [];
                                        
                                        var searches = 0;
                                        var endFound = false;
                                        
                                        do {

                                            var closestLocation = Navigation.getClosestLocation(scanning, endLocation);
                                            console.log(closestLocation);

                                            searches++;
                                            console.log('Search: ' + searches);
                                        } while (!endFound && searches < maxSearches);


                                        return path;
                                    }

                                    static getClosestLocation(locations, targetLocation) {
                                        var closestLocation = null; 
                                        var closestDistance = null;

                                        for (var i = 0; i < locations.length; i++) {
                                            var currentLocation = locations[i];
                                            var currentDistance = currentLocation.getDistance(targetLocation);

                                            if (closestLocation == null || currentDistance < closestDistance) {
                                                closestLocation = currentLocation;
                                                closestDistance = currentDistance;
                                            }
                                        }

                                        return closestLocation;
                                    }
                                }

                                class World {
                                    constructor() {
                                        this.locations = [];
                                        this.position = {x:100,y:100};
                                        this.scale = 1;
                                    }

                                    addLocation(location) {
                                        this.locations.push(location);
                                    }

                                    generate() {
                                        for (var x = 0; x < 20; x++) {
                                            for (var y = 0; y < 20; y++) {
                                                var newLocation = new Location(x,y);
                                                var rndType = getRandomInt(0,1);

                                                newLocation.setType(rndType);

                                                this.addLocation(newLocation);
                                            }
                                        }

                                        console.log(this);
                                    }

                                    draw() {

                                        ctx.save();
                                        ctx.scale(this.scale,this.scale);
                                        ctx.translate(this.position.x, this.position.y);
                                            for (var i = 0; i < this.locations.length; i++) {
                                                var location = this.locations[i];
                                                
                                                ctx.save();
                                                ctx.scale(1,1);
                                                ctx.translate(location.x * 20, location.y * 20);

                                                    ctx.fillStyle = '#000'; 
                                                    ctx.strokeStyle = '#0f0';
                                                    ctx.beginPath();
                                                        ctx.rect(0, 0, 20, 20);
                                                        ctx.fill();
                                                        ctx.stroke();
                                                    ctx.closePath();

                                                ctx.restore();

                                            }
                                        ctx.restore();
                                    }
                                }

                                var world = new World();
                                world.generate();
                                //console.log(Navigation.findPathBetween( new Location(0,0), new Location(5,2), 10 ));
                            </script>

                            <script>
                                $('#canvas').ready(function() {
                                    canvas = document.getElementById("canvas");
                                    ctx = canvas.getContext('2d');

                                    keys = {};
                                    mouse = {};

                                    window.addEventListener("keydown",
                                        function(e){
                                            keys[e.key] = true;
                                        },
                                    false);

                                    window.addEventListener("keyup",
                                        function(e){
                                            keys[e.key] = false;
                                        },
                                    false);

                                    window.addEventListener("mousedown",
                                        function(e){
                                            console.log(e);
                                            keys[e.key] = true;
                                        },
                                    false);

                                    function input()
                                    {

                                    }

                                    var interval = 0;
                                    function update(cur_time, dt)
                                    {

                                    }

                                    function draw(cur_time, dt)
                                    {
                                        last_draw = cur_time;
                                        
                                        ctx.clearRect(0, 0, canvas.width, canvas.height);



                                        world.draw();



                                        ctx.textAlign="start"; 
                                        ctx.font = '12px Arial';
                                        ctx.fillStyle="#444";
                                        ctx.fillText(Math.round((1 / dt) * 100) * 0.01 + ' fps',10,20);

                                        


                                        // ctx.fillStyle="#44AA44";
                                        // ctx.beginPath();
                                        // food.forEach(function(food_cell) {
                                        //     ctx.arc( food_cell.x * scale.x + (scale.x * 0.5), food_cell.y * scale.y + (scale.y * 0.6), scale.x * 0.4, 0, 2*Math.PI);
                                        //     ctx.fill();
                                        // }, this);
                                        // ctx.closePath();
                                        
                                        // ctx.fillStyle="#444";
                                        // ctx.strokeStyle="#aaa";
                                        // ctx.beginPath();
                                        // ctx.arc( (cell_draw.x + ( (cell.x - cell_draw.x) * progress )) * scale.x + (scale.x * 0.5), (cell_draw.y + ( (cell.y - cell_draw.y) * progress )) * scale.y + (scale.y * 0.5), scale.x * 0.5, 0, 2*Math.PI);
                                        // ctx.fill();
                                        // ctx.stroke();
                                        // ctx.closePath();


                                        // var cells = getAdjacentCells(snake[0], false)

                                        // ctx.fillStyle="#00f";
                                        // cells.forEach(function(cell) {
                                        //     ctx.beginPath();
                                        //     ctx.rect(cell.x * scale.x, cell.y * scale.y, scale.x - 1,scale.y - 1);
                                        //     ctx.fill();
                                        //     ctx.closePath();
                                        // }, this);

                                        // ctx.fillStyle="#f00";                                      
                                        // ctx.beginPath();
                                        // snake.forEach(function(cell) {
                                        //     ctx.rect(cell.x * scale.x + 2, cell.y * scale.y + 2, scale.x - 5,scale.y - 5);
                                        //     ctx.fill();
                                        // }, this);
                                        // ctx.closePath();
                                    }

                                    $(document).on('mousemove', function(e) {
                                        var bounds = canvas.getBoundingClientRect()
                                        mouse = {x: e.clientX - bounds.left, y: e.clientY - bounds.top};
                                    });

                                    var last_time = 0;
                                    function loop(cur_time)
                                    {
                                        var dt = (cur_time - last_time) * 0.001;
                                        last_time = cur_time;

                                        input();
                                        update(cur_time, dt);
                                        draw(cur_time, dt);

                                        window.requestAnimationFrame(loop);
                                    }
                                    window.requestAnimationFrame(loop);
                                });
                            </script>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <? $this->renderPartial('site/pages/page_footers/home.htm') ?>
</div>